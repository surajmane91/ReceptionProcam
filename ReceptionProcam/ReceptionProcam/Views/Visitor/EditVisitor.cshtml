@model ReceptionProcam.Models.clsVisitor
@section scripts
{
    <script src="~/Scripts/jquery.webcam.js"></script>
    <script src="~/Scripts/visitor.js"></script>
   
}

<style>
    .img-responsiveDiv {
    width: 30%;
    height: auto;
}

</style>
@{
    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
         {
             Text = "Gate 01 - RECEPTION",
             Value = "Gate 01 - RECEPTION"
         });
    listItems.Add(new SelectListItem
         {
             Text = "Gate 02 - RECEPITON",
             Value = "Gate 02 - RECEPITON",
             Selected = true
         });
    listItems.Add(new SelectListItem
         {
             Text = "Gate 03 - RECEPITON ",
             Value = "Gate 03 - RECEPITON"
         });
}
@{
    List<SelectListItem> listGate = new List<SelectListItem>();
    listGate.Add(new SelectListItem
         {
             Text = "Adhaar Card",
             Value = "1",
             Selected = true
         });
    listGate.Add(new SelectListItem
         {
             Text = "Pan Card",
             Value = "2"
         });
    listGate.Add(new SelectListItem
         {
             Text = "Voter Card",
             Value = "3"
         });
    listGate.Add(new SelectListItem
    {
        Text = "Passport",
        Value = "4"
    });
}
@{
    List<SelectListItem> listDays = new List<SelectListItem>();
    listDays.Add(new SelectListItem
    {
        Text = "-- Please select Validity days --",
        Value = "0",
        Selected = true
    });
    listDays.Add(new SelectListItem
         {
             Text = "1 Day",
             Value = "1",
         });
    listDays.Add(new SelectListItem
         {
             Text = "3 Days",
             Value = "3"
         });
    listDays.Add(new SelectListItem
         {
             Text = "7 Days",
             Value = "7"
         });

    listDays.Add(new SelectListItem
    {
        Text = "Please select date",
        Value = "8",

    });
}


@if (TempData["Success"] != null)
{
    <p class="alert alert-success" id="successMessage">@TempData["Success"]</p>
}

@using (Html.BeginForm(new { @class = "m-form m-form--fit m-form--label-align-right m-form--group-seperator-dashed", role = "form" }))
{
    @Html.AntiForgeryToken()

    		<!--begin::Portlet-->
    <div class="m-portlet">
        <div class="m-portlet__head">
            <div class="m-portlet__head-caption">
                <div class="m-portlet__head-title">
                    <span class="m-portlet__head-icon m--hide">
                        <i class="la la-gear"></i>
                    </span>
                    <h3 class="m-portlet__head-text">
                        Edit Visitor
                    </h3>
                </div>

            </div>
        </div>
        <!--begin::Form-->

        <div class="m-portlet__body">
            <div class="form-group m-form__group row img-responsiveDiv">
                <img class="img-responsive" src="@Url.Content(Model.ImagePath)" alt="Image" style="width:100%; height:auto" />
                @Html.HiddenFor(model => model.ImagePath)
                @*<div id="webcam" class="col-lg-2">

            </div>
            <div class="col-lg-2 offset-2 camDivsty">
                <input type="button" class="btn btn-primary" value="Capture" onclick="Capture();" />
            </div>*@
            </div>
            <br>
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.VisitorId, htmlAttributes: new { })
                    @Html.EditorFor(model => model.VisitorId, new { htmlAttributes = new { @Id = "txtVisitorId", @class = "form-control m-input" } })
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { autocomplete = "off", maxlength = 100, @class = "form-control m-input", @placeholder = "Name", @style = "text-transform:uppercase" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { autocomplete = "off", maxlength = 12, @class = "form-control m-input", @placeholder = "Mobile No" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.MobileNo, "", new { @class = "text-danger" })</p>
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Email, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { autocomplete = "off", maxlength = 30, @class = "form-control m-input", @placeholder = "Email" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.GovId, htmlAttributes: new { })<span class="text-danger">*</span>
                    @*@Html.EditorFor(model => model.Gate, new { htmlAttributes = new { @class = "form-control m-input", @placeholder = "Gate" } })*@
                    @Html.DropDownListFor(m => m.GovId, listGate, "-- Select Gov Id Proof --", new {  @class = "form-control m-input" })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.GovId, "", new { @class = "text-danger" })</p>
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.DOB, htmlAttributes: new { })
                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { autocomplete = "off", maxlength = 20, @Id = "txtDOB", @class = "form-control m-input" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.DOB, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.AssetId, htmlAttributes: new { })
                    @Html.EditorFor(model => model.AssetId, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "Asset Id" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.AssetId, "", new { @class = "text-danger" })</p>
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Form, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Form, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "From" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Form, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group m-form__group row">

                <div class="col-lg-6">
                    @Html.LabelFor(model => model.ToMeet, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.ToMeet, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "To Meet" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.ToMeet, "", new { @class = "text-danger" })</p>
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.SubLocation, htmlAttributes: new { })
                    @Html.EditorFor(model => model.SubLocation, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "Sub Location" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.SubLocation, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Building, htmlAttributes: new { })
                    @Html.EditorFor(model => model.Building, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "Building" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Building, "", new { @class = "text-danger" })</p>
                </div>
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Gate, htmlAttributes: new { })<span class="text-danger">*</span>
                    @*@Html.EditorFor(model => model.Gate, new { htmlAttributes = new { @class = "form-control m-input", @placeholder = "Gate" } })*@
                    @Html.DropDownListFor(m => m.Gate, listItems, "-- Select Gate Number --", new { @class = "form-control m-input" })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Gate, "", new { @class = "text-danger" })</p>
                </div>
            </div>
            @*<div class="form-group m-form__group row">

                <div class="col-lg-6">
                    @Html.LabelFor(model => model.TimeIn, htmlAttributes: new { })
                    @Html.EditorFor(model => model.TimeIn, new { htmlAttributes = new { @Id = "txtInTime", @class = "form-control m-input", @placeholder = "In Time" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.TimeIn, "", new { @class = "text-danger" })</p>
                </div><div class="col-lg-6">
                    @Html.LabelFor(model => model.ValidUpto, htmlAttributes: new { })
                    @Html.EditorFor(model => model.ValidUpto, new { htmlAttributes = new {@Id="txtValidUpto", @class = "form-control m-input", @placeholder = "Valid Up to" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.ValidUpto, "", new { @class = "text-danger" })</p>
                </div>
            </div>*@
            @Html.HiddenFor(model => model.TimeIn, htmlAttributes: new { @Id = "hfTimeIn" })
            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.Label("Validity Time", htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.DropDownList("Days", listDays, new { @Id = "ddlDays", autocomplete = "off", @class = "form-control m-input" })
                    <p class="help-block">@Html.ValidationMessage("Please select Validity Days", "", new { @class = "text-danger" })</p>
                </div><div class="col-lg-6">
                    @Html.LabelFor(model => model.ValidUpto, htmlAttributes: new { })
                    @Html.EditorFor(model => model.ValidUpto, new { htmlAttributes = new { autocomplete = "off", maxlength = 30, @Id = "txtValidUpto", @class = "form-control m-input", @placeholder = "Valid Up to" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.ValidUpto, "", new { @class = "text-danger" })</p>
                </div>
            </div>

            <div class="form-group m-form__group row">
                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Purpose, htmlAttributes: new { })<span class="text-danger">*</span>
                    @Html.EditorFor(model => model.Purpose, new { htmlAttributes = new { autocomplete = "off", maxlength = 50, @class = "form-control m-input", @placeholder = "Purpose" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Purpose, "", new { @class = "text-danger" })</p>
                </div>

                <div class="col-lg-6">
                    @Html.LabelFor(model => model.Remark, htmlAttributes: new { })
                    @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control m-input", maxlength = 50, @placeholder = "Remark" } })
                    <p class="help-block">@Html.ValidationMessageFor(m => m.Remark, "", new { @class = "text-danger" })</p>
                </div>
            </div>
        </div>
        <div class="m-portlet__foot m-portlet__no-border m-portlet__foot--fit" style=" padding-left: 32%;">
            <div class="m-form__actions m-form__actions--solid">
                <div class="row">
                    
                        <button type="submit" class="btn btn-primary" >
                            Submit
                        </button>
                    &nbsp;&nbsp;
                        <button type="reset" class="btn btn-secondary" onclick="@("window.location.href='" + @Url.Action("VisitorDetails", "Visitor") + "'");">
                            Cancel
                        </button>
                </div>
            </div>
        </div>
        <br />
    </div>
    
}



